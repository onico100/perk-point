'use client';
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import debounce from "lodash.debounce";
import my_http from "@/services/http";
import { useFetchSuppliers } from "@/hooks/useFetchSuppliers";
import router from "next/router";
import { Supplier } from "@/types/types";



const supplierSchema = z.object({
  providerName: z.string().min(3, "שם הספק חייב להיות לפחות 3 תווים."),
  email: z.string().email("כתובת אימייל אינה חוקית."),
  password: z.string().min(6, "סיסמה חייבת להכיל לפחות 6 תווים."),
  businessName: z.string().min(3, "יש להזין שם עסק בעל לפחות 3 תווים."),
  phoneNumber: z.string().regex(/^\d{10}$/, "מספר הטלפון חייב להיות באורך 10 ספרות."),
  siteLink: z.string().url("כתובת האתר אינה חוקית."),
  supplierLogo: z.string().url("כתובת ה- URL של הלוגו אינה חוקית."),
  city: z.string().min(1, "יש לבחור עיר מרשימת הערים."),
});

type SupplierFormValues = z.infer<typeof supplierSchema>;

export default function SignSupplierComponent() {
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const { addSupplier } = useFetchSuppliers(); 
  
  const { register, handleSubmit, setValue, formState: { errors } } = useForm<SupplierFormValues>({
    resolver: zodResolver(supplierSchema),
  });

  const onSubmit2 = async (data: SupplierFormValues) => {
    try {
      console.log("Form Data:", data); 
      const response = await fetch("/suppliers/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });
  
      if (response.ok) {
        const result = await response.json();
        console.log("Server Response:", result);
        alert("הספק נוסף בהצלחה!");
        router.push("/");
      } else {
        alert("אירעה שגיאה. נסי שוב.");
        console.error("Error:", await response.text());
      }
    } catch (error) {
      console.error("Error adding supplier:", error);
      alert("אירעה שגיאה. נסי שוב.");
    }
  };
  
  const onSubmit = (data: SupplierFormValues) => {
    addSupplier(data, {
      onSuccess: (supplier:Supplier) => {
        alert("Supplier added successfully!");
        console.log("Current supplier stored in Zustand:", supplier);
      },
      onError: (error:Error) => {
        console.error("Failed to add supplier:", error);
        alert("Failed to add supplier.");
      },
    });
  };

  const fetchCities = debounce(async (textQuery: string) => {
    if (!textQuery) {
      setSuggestions([]);
      setDropdownVisible(false);
      return;
    }

    try {
      setLoading(true);
      console.log("query:", textQuery);
      const response = await my_http.post(`/googleAutocomplete/post`, { textQuery });
      console.log("Response:", response.data); 
      const citySuggestions = response.data.places.map((place: any) => place.displayName.text);
      setSuggestions(citySuggestions);
      setDropdownVisible(true);
    } 
    catch (error) {
      console.error("Error fetching suggestions:", error);
      setSuggestions([]);
      setDropdownVisible(false);
    } finally {
      setLoading(false);
    }
  }, 500);


  return (
    <div className="add-supplier-page">
      <h1 className="text-center text-2xl font-bold">Add New Supplier</h1>
      <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col gap-4 max-w-md mx-auto">
        
        {/* Provider Name */}
        <div>
          <label htmlFor="providerName" className="block text-sm font-medium">שם ספק:</label>
          <input
            id="providerName"
            type="text"
            className="w-full border rounded px-2 py-1"
            {...register("providerName")}
          />
          {errors.providerName && <p className="text-red-500 text-sm">{errors.providerName.message}</p>}
        </div>

        {/* Email */}
        <div>
          <label htmlFor="email" className="block text-sm font-medium">אימייל:</label>
          <input
            id="email"
            type="email"
            className="w-full border rounded px-2 py-1"
            {...register("email")}
          />
          {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
        </div>

        {/* Password */}
        <div>
          <label htmlFor="password" className="block text-sm font-medium">סיסמה:</label>
          <input
            id="password"
            type="password"
            className="w-full border rounded px-2 py-1"
            {...register("password")}
          />
          {errors.password && <p className="text-red-500 text-sm">{errors.password.message}</p>}
        </div>

        {/* Business Name */}
        <div>
          <label htmlFor="businessName" className="block text-sm font-medium">שם העסק:</label>
          <input
            id="businessName"
            type="text"
            className="w-full border rounded px-2 py-1"
            {...register("businessName")}
          />
          {errors.businessName && <p className="text-red-500 text-sm">{errors.businessName.message}</p>}
        </div>

        {/* Phone Number */}
        <div>
          <label htmlFor="phoneNumber" className="block text-sm font-medium">מספר טלפון:</label>
          <input
            id="phoneNumber"
            type="text"
            className="w-full border rounded px-2 py-1"
            {...register("phoneNumber")}
          />
          {errors.phoneNumber && <p className="text-red-500 text-sm">{errors.phoneNumber.message}</p>}
        </div>

        {/* Site Link */}
        <div>
          <label htmlFor="siteLink" className="block text-sm font-medium">קישור לאתר:</label>
          <input
            id="siteLink"
            type="url"
            className="w-full border rounded px-2 py-1"
            {...register("siteLink")}
          />
          {errors.siteLink && <p className="text-red-500 text-sm">{errors.siteLink.message}</p>}
        </div>

        {/* Supplier Logo */}
        <div>
          <label htmlFor="supplierLogo" className="block text-sm font-medium">קישור ללוגו:</label>
          <input
            id="supplierLogo"
            type="url"
            className="w-full border rounded px-2 py-1"
            {...register("supplierLogo")}
          />
          {errors.supplierLogo && <p className="text-red-500 text-sm">{errors.supplierLogo.message}</p>}
        </div>

        {/* City */}
        <div>
          <label htmlFor="city" className="block text-sm font-medium">עיר:</label>
          <input
            id="city"
            type="text"
            className="w-full border rounded px-2 py-1"
            {...register("city")}
            onChange={(e) => fetchCities(e.target.value)}
            onFocus={() => setDropdownVisible(true)}
          />
          {loading && <p>Loading...</p>}
          {dropdownVisible && suggestions.length > 0 && (
            <ul className="border border-gray-300 rounded mt-1 max-h-40 overflow-y-auto bg-white z-10 absolute w-full">
              {suggestions.map((city, index) => (
                <li
                  key={index}
                  className="cursor-pointer px-2 py-1 hover:bg-gray-200"
                  onClick={() => {
                    setValue("city", city);
                    setSuggestions([]);
                    setDropdownVisible(false);
                  }}
                >
                  {city}
                </li>
              ))}
            </ul>
          )}
          {errors.city && <p className="text-red-500 text-sm">{errors.city.message}</p>}
        </div>

        <button type="submit" className="bg-blue-500 text-white rounded px-4 py-2 hover:bg-blue-600 transition">
          קדימה, תרשמו אותי!
        </button>
      </form>
    </div>
  );
}
